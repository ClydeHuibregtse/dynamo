#!/usr/bin/env python

import sys
import os
import logging
import time
import re
import fnmatch

from common.inventory import InventoryManager
from common.transaction import TransactionManager
from common.demand import DemandManager
import common.interface.classes as classes
from detox.main import Detox
from detox.policy import Policy
from detox.policies.site import NonzeroQuota, GroupOccupancy
from detox.policies.replica import BelongsTo
import detox.configuration as detox_config
import common.configuration as config

from argparse import ArgumentParser

parser = ArgumentParser(description = 'Detox')
parser.add_argument('--store', '-i', metavar = 'CLASS', dest = 'store_cls', default = '', help = 'Store backend class.')
parser.add_argument('--site-source', '-s', metavar = 'CLASS', dest = 'site_source_cls', default = '', help = 'SiteInfoSourceInterface class.')
parser.add_argument('--dataset-source', '-t', metavar = 'CLASS', dest = 'dataset_source_cls', default = '', help = 'DatasetInfoSourceInterface class.')
parser.add_argument('--replica-source', '-r', metavar = 'CLASS', dest = 'replica_source_cls', default = '', help = 'ReplicaInfoSourceInterface class.')
parser.add_argument('--access-history', '-a', metavar = 'CLASS', dest = 'access_history_cls', default = '', help = 'AccessHistoryInterface class.')
parser.add_argument('--lock', '-k', metavar = 'CLASS', dest = 'lock_cls', default = '', help = 'LockInterface class.')
parser.add_argument('--deletion', '-d', metavar = 'CLASS', dest = 'deletion_cls', default = '', help = 'DeletionInterface class.')
parser.add_argument('--force-inventory-update', '-I', action = 'store_true', dest = 'force_inventory_update', help = 'Force inventory to update.')
parser.add_argument('--policy-stack', '-p', metavar = 'STACKS', dest = 'stacks', nargs = '+', default = ['AnalysisOps:minimum_copies:iterative', 'DataOps:locked:static'], help = 'Name of the policy stack. Syntax is <group>:<path>.py:strategy. The python file should contain variables "default" and "rule_stack". If a relative path is provided, a file is searched for in policies/detoxstacks. Recognized strategies are "iterative", "static", and "greedy".')
parser.add_argument('--site', '-c', metavar = 'SITE', dest = 'included_sites', nargs = '+', default = [], help = 'List of sites to include. If not specified, all sites in inventory are included. Wildcard is allowed.')
parser.add_argument('--log-level', '-l', metavar = 'LEVEL', dest = 'log_level', default = 'WARNING', help = 'Logging level.')
parser.add_argument('--log-file', '-o', metavar = 'PATH', dest = 'log_file', default = '', help = 'Log output file.')
parser.add_argument('--dry-run', '-D', action = 'store_true', dest = 'dry_run', help = 'Do not make any actual deletion requests or changes to local databases.')
parser.add_argument('--test-run', '-T', action = 'store_true', dest = 'test_run', help = 'Make a test run (results recorded in local database).')

args = parser.parse_args()
sys.argv = []

log_level = getattr(logging, args.log_level.upper())

if args.log_file:
    logging.basicConfig(filename = args.log_file, filemode = 'w', level = log_level)
else:
    logging.basicConfig(level = log_level)

if args.dry_run:
    config.read_only = True

kwd = {}
for cls in ['store', 'site_source', 'dataset_source', 'replica_source']:
    clsname = getattr(args, cls + '_cls')
    if clsname == '':
        kwd[cls + '_cls'] = classes.default_interface[cls]
    else:
        kwd[cls + '_cls'] = getattr(classes, clsname)

inventory_manager = InventoryManager(**kwd)

kwd = {}
for cls in ['deletion']:
    clsname = getattr(args, cls + '_cls')
    if clsname == '':
        kwd[cls + '_cls'] = classes.default_interface[cls]
    else:
        kwd[cls + '_cls'] = getattr(classes, clsname)

transaction_manager = TransactionManager(**kwd)

kwd = {}
for cls in ['store', 'access_history', 'lock']:
    clsname = getattr(args, cls + '_cls')
    if clsname == '':
        kwd[cls + '_cls'] = classes.default_interface[cls]
    else:
        kwd[cls + '_cls'] = getattr(classes, clsname)

demand_manager = DemandManager(**kwd)

history = classes.default_interface['history']()

# Main detox object

detox = Detox(inventory_manager, transaction_manager, demand_manager, history)

# Set up the policies

included_sites = None
if len(args.included_sites) != 0:
    # form a regexp (?:pattern1|pattern2|..)
    included_sites = re.compile('(?:' + '|'.join(map(fnmatch.translate, args.included_sites)) + ')')

partitions = []

for stack_spec in args.stacks:
    partition, stack_name, strategy_str = stack_spec.split(':')

    try:
        strategy = eval('Policy.ST_' + strategy_str.upper())
    except NameError:
        print 'Unknown strategy', strategy_str
        sys.exit(1)

    partitions.append(partition)

    if not stack_name.endswith('.py'):
        stack_name += '.py'

    # if the file does not exist, it's probably in policies/detoxstacks
    if not os.path.exists(stack_name):
        stack_name = os.environ['DYNAMO_BASE'] + '/policies/detoxstacks/' + stack_name

    # imports "default" and "rule_stack"
    execfile(stack_name)

    # currently partition = group
    group = inventory_manager.groups[partition]
    quotas = dict([(site, site.group_quota(group)) for site in inventory_manager.sites.values()])

    if strategy == Policy.ST_ITERATIVE or strategy == Policy.ST_STATIC:
        # Return true if the site is overused for a given partition.
        # Currently partition and group names are identical.
        site_requirement = GroupOccupancy(group, included_sites)

    elif strategy == Policy.ST_GREEDY:
        # True as long as the group has a nonzero quota
        site_requirement = NonzeroQuota(group, included_sites)

    policy = Policy(default, rule_stack, strategy, quotas, partition = partition, site_requirement = site_requirement, replica_requirement = BelongsTo(group))

    detox.set_policy(policy)

if args.force_inventory_update:
    inventory_manager.update()

for partition in partitions:
    detox.run(partition = partition, is_test = args.test_run)
