#!/usr/bin/env python

import sys
import os
import logging
import time

from common.inventory import InventoryManager
from common.transaction import TransactionManager
from common.demand import DemandManager
import common.interface.classes as classes
from detox.main import Detox
from detox.policy import Policy
from detox.rules import make_stack, BelongsTo

import common.configuration as config

from argparse import ArgumentParser

parser = ArgumentParser(description = 'Detox')
parser.add_argument('--store', '-i', metavar = 'CLASS', dest = 'store_cls', default = '', help = 'Store backend class.')
parser.add_argument('--site-source', '-s', metavar = 'CLASS', dest = 'site_source_cls', default = '', help = 'SiteInfoSourceInterface class.')
parser.add_argument('--dataset-source', '-t', metavar = 'CLASS', dest = 'dataset_source_cls', default = '', help = 'DatasetInfoSourceInterface class.')
parser.add_argument('--replica-source', '-r', metavar = 'CLASS', dest = 'replica_source_cls', default = '', help = 'ReplicaInfoSourceInterface class.')
parser.add_argument('--access-history', '-a', metavar = 'CLASS', dest = 'access_history_cls', default = '', help = 'AccessHistoryInterface class.')
parser.add_argument('--lock', '-k', metavar = 'CLASS', dest = 'lock_cls', default = '', help = 'LockInterface class.')
parser.add_argument('--deletion', '-d', metavar = 'CLASS', dest = 'deletion_cls', default = '', help = 'DeletionInterface class.')
parser.add_argument('--force-inventory-update', '-I', action = 'store_true', dest = 'force_inventory_update', help = 'Force inventory to update.')
parser.add_argument('--policy-stack', '-p', metavar = 'STACKS', dest = 'stacks', nargs = '+', default = ['AnalysisOps:Routine(500)'], help = 'Name of the policy stack. Syntax is <group>:<stack name>[(<init argument>)] or <group>:<path>.py. Options for stack names are\n TargetFraction (argument threshold)\n List (argument paths)\n The python file should contain a list of Policies with the same name as the file.')
parser.add_argument('--strategy', '-g', metavar = 'STRATEGY', dest = 'strategy', default = 'iterative', help = '"iterative", "static", or "greedy".')
parser.add_argument('--log-level', '-l', metavar = 'LEVEL', dest = 'log_level', default = '', help = 'Logging level.')
parser.add_argument('--log-file', '-o', metavar = 'PATH', dest = 'log_file', default = '', help = 'Log output file.')
parser.add_argument('--dry-run', '-D', action = 'store_true', dest = 'dry_run', help = 'Do not make any actual deletion requests or changes to local databases.')
parser.add_argument('--test-run', '-T', action = 'store_true', dest = 'test_run', help = 'Make a test run (results recorded in local database).')
parser.add_argument('--repeat', '-n', metavar = 'CYCLES SLEEP', dest = 'repeat', type = int, nargs = 2, default = [1, 0], help = 'Repeat execution for CYCLES times with SLEEP hour interval.')

args = parser.parse_args()
sys.argv = []

if args.strategy not in ['iterative', 'static', 'greedy']:
    print 'Unknown strategy', args.strategy
    sys.exit(1)

log_level = logging.INFO
if args.log_level:
    try:
        log_level = getattr(logging, args.log_level.upper())
    except AttributeError:
        logging.warning('Log level ' + args.log_level + ' not defined')

if args.log_file:
    logging.basicConfig(filename = args.log_file, filemode = 'w', level = log_level)
else:
    logging.basicConfig(level = log_level)

if args.dry_run:
    config.read_only = True

kwd = {}
for cls in ['store', 'site_source', 'dataset_source', 'replica_source']:
    clsname = getattr(args, cls + '_cls')
    if clsname == '':
        kwd[cls + '_cls'] = classes.default_interface[cls]
    else:
        kwd[cls + '_cls'] = getattr(classes, clsname)

inventory_manager = InventoryManager(**kwd)

kwd = {}
for cls in ['deletion']:
    clsname = getattr(args, cls + '_cls')
    if clsname == '':
        kwd[cls + '_cls'] = classes.default_interface[cls]
    else:
        kwd[cls + '_cls'] = getattr(classes, clsname)

transaction_manager = TransactionManager(**kwd)

kwd = {}
for cls in ['store', 'access_history', 'lock']:
    clsname = getattr(args, cls + '_cls')
    if clsname == '':
        kwd[cls + '_cls'] = classes.default_interface[cls]
    else:
        kwd[cls + '_cls'] = getattr(classes, clsname)

demand_manager = DemandManager(**kwd)

history = classes.default_interface['history']()

# Main detox object

detox = Detox(inventory_manager, transaction_manager, demand_manager, history)

# Set up the policies

partitions = []

for stack_spec in args.stacks:
    partition, stack_name = stack_spec.split(':')

    partitions.append(partition)

    if stack_name.endswith('.py'):
        # argument is a python file that defines the default decision
        # and a list of stacks with the same name as the file
        execfile(stack_name)
        rule_stack = eval(os.path.basename(stack_name)[:-3]) # removing .py

    else:
        if '(' in stack_name:
            name_with_args = stack_name
            stack_name = name_with_args[:name_with_args.find('(')]
            stack_args = eval(name_with_args[name_with_args.find('('):]) # evaluate the entire "(arg)" as python code
            if type(stack_args) is not tuple:
                stack_args = (stack_args,)

        else:
            stack_args = tuple()

        rule_stack, default = make_stack(stack_name)(*stack_args)

    # currently partition = group
    group = inventory_manager.groups[partition]
    quotas = dict([(site, site.group_quota[group]) for site in inventory_manager.sites.values()])

    if args.strategy == 'greedy':
        site_requirement = lambda site, partition: site.group_quota[inventory_manager.groups[partition]] != 0
    else:
        # Return true if the site is overused for a given partition.
        # Currently partition and group names are identical.
        site_requirement = lambda site, partition: site.group_quota[inventory_manager.groups[partition]] != 0 and site.storage_occupancy(inventory_manager.groups[partition]) > config.target_site_occupancy

    policy = Policy(default, rule_stack, quotas, partition = partition, site_requirement = site_requirement, prerequisite = BelongsTo(group))
    policy.groups = [group]

    detox.set_policy(policy, partition = partition)

if args.force_inventory_update:
    config.inventory.refresh_min = 0

for nrun in range(args.repeat[0]):
    for partition in partitions:
        detox.run(partition = partition, iterative_deletion = (args.strategy == 'iterative'), is_test = args.test_run)

    if args.repeat[1] > 0:
        time.sleep(args.repeat[1] * 3600)
