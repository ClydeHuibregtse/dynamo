#!/usr/bin/env python

import sys
import os
import logging

from common.inventory import InventoryManager
from common.transaction import TransactionManager
from common.demand import DemandManager
import common.interface.classes as classes
from detox.main import Detox

import common.configuration as config

from argparse import ArgumentParser

parser = ArgumentParser(description = 'Detox')
parser.add_argument('--inventory', '-i', metavar = 'CLASS', dest = 'inventory_cls', default = '', help = 'Inventory backend class.')
parser.add_argument('--site-source', '-s', metavar = 'CLASS', dest = 'site_source_cls', default = '', help = 'SiteInfoSourceInterface class.')
parser.add_argument('--dataset-source', '-t', metavar = 'CLASS', dest = 'dataset_source_cls', default = '', help = 'DatasetInfoSourceInterface class.')
parser.add_argument('--replica-source', '-r', metavar = 'CLASS', dest = 'replica_source_cls', default = '', help = 'ReplicaInfoSourceInterface class.')
parser.add_argument('--force-inventory-update', '-I', action = 'store_true', dest = 'force_inventory_update', help = 'Force inventory to update.')
parser.add_argument('--policy-stack', '-p', metavar = 'STACK', dest = 'stack', nargs = '+', default = ['TargetFraction'], help = 'Name of the policy stack. Options are\n TargetFraction [threshold]\n List <path> [<path> ..]\n <path>.py\n The python file should contain a list of Policies with the same name as the file.')
parser.add_argument('--static-deletion', '-S', action = 'store_true', dest = 'static_deletion', help = 'Delete everything in the deletion list at once.')
parser.add_argument('--log-level', '-l', metavar = 'LEVEL', dest = 'log_level', default = '', help = 'Logging level.')

args = parser.parse_args()
sys.argv = []

if args.log_level:
    try:
        level = getattr(logging, args.log_level.upper())
        logging.getLogger().setLevel(level)
    except AttributeError:
        logging.warning('Log level ' + args.log_level + ' not defined')

kwd = {}
for cls in ['inventory', 'site_source', 'dataset_source', 'replica_source']:
    clsname = getattr(args, cls + '_cls')
    if clsname == '':
        kwd[cls + '_cls'] = classes.default_interface[cls]
    else:
        kwd[cls + '_cls'] = getattr(classes, clsname)

inventory_manager = InventoryManager(**kwd)
inventory_manager.inventory.debug_mode = True

transaction_manager = TransactionManager()
transaction_manager.deletion.debug_mode = True

demand_manager = DemandManager()

if args.stack[0].endswith('.py'):
    execfile(args.stack[0])

    policy_stack = eval(os.path.basename(args.stack[0])[:-3])

else:
    from detox.policies import make_stack

    stack = args.stack[0]
    stack_args = args.stack[1:]

    policy_stack = make_stack(args.stack[0])

    if stack == 'TargetFraction':
        if len(stack_args) > 0:
            policy_stack[0].threshold = float(stack_args[0])
    
    elif stack == 'List':
        for list_path in stack_args:
            policy_stack[-1].load_list(list_path)

detox = Detox(inventory_manager, transaction_manager, demand_manager, policy_stack)

if args.force_inventory_update:
    config.inventory.refresh_min = 0

detox.run(dynamic_deletion = not args.static_deletion)
