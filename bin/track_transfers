#!/usr/bin/env python

import sys
import os
import time
import rrdtool
import selinux
import subprocess

import common.configuration as config
import common.interface.classes as classes
import common.interface.merger_rrd as merger_rrd

from glob import glob

rrd_dir = config.paths.data + '/track_transfers'
sites = glob(rrd_dir+'/*')
sites.remove('/var/spool/dynamo/track_transfers/monitoring')

interval = 1800

graphDefs = [
    '--width=400', '--height=300', '--full-size-mode',
    '--vertical-label=CopyStatus',
    '--lower-limit=0',
]  

try:
    os.makedirs(rrd_dir)
except:
    pass

request_ids = []

partition = 'AnalysisOps'

try:
    source_path = sys.argv[1]
    with open(source_path) as source:
        for line in source:
            request_ids.append(int(line.strip()))

except:
    history = classes.default_interface['history']()

    records = history.get_incomplete_copies(partition)
    
    for record in records:
        request_ids.append(record.operation_id)
        
copy = classes.default_interface['copy']()

timestamp = int(time.time()) / interval * interval

counter = 0

for request_id in request_ids:
    
    status = copy.copy_status(request_id)

    for (site, dataset), (last_update, total, copied) in status.items():
        rrd_filepath = rrd_dir + '/' + site
        tmp = rrd_dir + '/' + site + '/'  +  dataset.replace('/', '+') + '.rrd'
        rrd_file = tmp.replace('+','',1)
        
                
        if not os.path.exists(rrd_filepath):
            # Create path corresponding to site
            subprocess.call("mkdir %s" % rrd_filepath, shell=True)
        
        if not os.path.exists(rrd_file):
            # RRD does not exist yet
            start = (int(time.time()) / interval - 1) * interval
            timestamp_id = start

            # let rrd file start at timestamp corresponding to creation of transfer request
            for record in records:
                if record.operation_id == request_id:
                    timestamp_id = record.timestamp

            rrdtool.create(rrd_file, '--start', str(start), '--step', str(interval),
                'DS:copied:GAUGE:%d:0:U' % (interval * 48),
                'DS:total:GAUGE:%d:0:U' % (interval * 48),
                'RRA:LAST:0:1:%i' % int((time.time()-timestamp_id)/1800)    )

            # data source
            #  DS:<name>:<type>:<heartbeat>:<min>:<max>
            #  type = GAUGE: quantity that has a value at each time point
            #  heartbeat: "maximum number of seconds that may pass between two updates of this data source before the value of the data source is assumed to be *UNKNOWN*"
            #  min/max = U: unknown
            # round robin archive (RRA)
            #  RRA:<type>:<xff>:<nsteps>:<nrows>
            #  type = LAST: just use the last value, no averaging etc.
            #  xff: fraction of <nsteps> that can have UNKNOWN as the value
            #  nsteps: number of steps used for calculation
            #  nrows: number of records to keep

            # change selinux context of the RRD so that it can be read by a apache-invoked PHP script
            selinux.chcon(rrd_file, 'unconfined_u:object_r:httpd_var_run_t:s0')

        try:
            rrdtool.update(rrd_file, '%d:%d:%d' % (timestamp, copied, total))
            
            # Creating a copy status plot for each dataset
            rrdtool.graph('%s/monitoring/dataset_%s.png' % (rrd_dir , rrd_file.rsplit('.',1)[0].rsplit('/',1)[1]), '--width=400', '--height=300', '--full-size-mode', '--vertical-label=CopyStatus', '--lower-limit=0', '--title=%s' % rrd_file.rsplit('.',1)[0].rsplit('/',1)[1], 'DEF:copied=%s:copied:LAST' % rrd_file, 'DEF:total=%s:total:LAST' % rrd_file, 'AREA:copied#aaffcc:Copied', 'LINE2:total#FF0000:Total')
        except:
            pass

    counter = counter +1    
        
    if counter > 1:
        break

# Create overviews for different sites
for site in sites:
    rrd_files = [f for f in os.listdir(site)]

    rrd_defstring = ""
    rrd_cdefstring = ""
    rrd_cdefcopstring = "CDEF:copied="
    rrd_cdeftotstring = "CDEF:total="

    # massaging the DEF and CDEF strings 
    for rrd_file in rrd_files:
        if rrd_files.index(rrd_file) == 0:
            rrd_defstring = 'DEF:copied%s=%s/%s:copied:LAST DEF:total%s=%s/%s:total:LAST' % (rrd_files.index(rrd_file) , site , rrd_file , rrd_files.index(rrd_file) , site , rrd_file)        
            rrd_cdefcopstring = rrd_cdefcopstring + "copied%s" % rrd_files.index(rrd_file) 
            rrd_cdeftotstring = rrd_cdeftotstring + "total%s" % rrd_files.index(rrd_file) 
        else:
            rrd_defstring = rrd_defstring + " " + 'DEF:copied%s=%s/%s:copied:LAST DEF:total%s=%s/%s:total:LAST' % (rrd_files.index(rrd_file) , site , rrd_file , rrd_files.index(rrd_file) , site , rrd_file)
            rrd_cdefcopstring = rrd_cdefcopstring + ",copied%s,+" % rrd_files.index(rrd_file) 
            rrd_cdeftotstring = rrd_cdeftotstring + ",total%s,+" % rrd_files.index(rrd_file) 

    rrd_cdefstring = rrd_cdefcopstring + " " + rrd_cdeftotstring
    rrd_string = rrd_defstring + " " + rrd_cdefstring
    
    # creating the final argument list
    rrd_arglist = graphDefs + rrd_string.split()

    # plotting
    try:
        rrdtool.graph('%s/monitoring/site_%s.png' % (rrd_dir , site.rsplit('/',1)[1]),  *tuple(['--title=%s' % site.rsplit('/',1)[1]] + rrd_arglist + ['AREA:copied#aaffcc:Copied'] +['LINE2:total#FF0000:Total']))
    except:
        pass
